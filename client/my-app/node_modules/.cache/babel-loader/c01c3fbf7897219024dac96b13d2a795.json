{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\Pet_Memories\\\\client\\\\my-app\\\\src\\\\components\\\\Home\\\\TagsInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Downshift from \"downshift\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  chip: {\n    margin: theme.spacing(0.5, 0.25)\n  }\n}));\nexport default function TagsInput(_ref) {\n  _s();\n\n  let { ...props\n  } = _ref;\n  const classes = useStyles();\n  const {\n    selectedTags,\n    placeholder,\n    tags,\n    ...other\n  } = props;\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [selectedItem, setSelectedItem] = React.useState([]);\n  useEffect(() => {\n    setSelectedItem(tags);\n  }, [tags]);\n  useEffect(() => {\n    selectedTags(selectedItem);\n  }, [selectedItem, selectedTags]);\n\n  function handleKeyDown(event) {\n    if (event.key === \"Enter\") {\n      const newSelectedItem = [...selectedItem];\n      const duplicatedValues = newSelectedItem.indexOf(event.target.value.trim());\n\n      if (duplicatedValues !== -1) {\n        setInputValue(\"\");\n        return;\n      }\n\n      if (!event.target.value.replace(/\\s/g, \"\").length) return;\n      newSelectedItem.push(event.target.value.trim());\n      setSelectedItem(newSelectedItem);\n      setInputValue(\"\");\n    }\n\n    if (selectedItem.length && !inputValue.length && event.key === \"Backspace\") {\n      setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\n    }\n  }\n\n  function handleChange(item) {\n    let newSelectedItem = [...selectedItem];\n\n    if (newSelectedItem.indexOf(item) === -1) {\n      newSelectedItem = [...newSelectedItem, item];\n    }\n\n    setInputValue(\"\");\n    setSelectedItem(newSelectedItem);\n  }\n\n  const handleDelete = item => () => {\n    const newSelectedItem = [...selectedItem];\n    newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n    setSelectedItem(newSelectedItem);\n  };\n\n  function handleInputChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Downshift, {\n      id: \"downshift-multiple\",\n      inputValue: inputValue,\n      onChange: handleChange,\n      selectedItem: selectedItem,\n      children: _ref2 => {\n        let {\n          getInputProps\n        } = _ref2;\n        const {\n          onBlur,\n          onChange,\n          onFocus,\n          ...inputProps\n        } = getInputProps({\n          onKeyDown: handleKeyDown,\n          placeholder\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            InputProps: {\n              startAdornment: selectedItem.map(item => /*#__PURE__*/_jsxDEV(Chip, {\n                tabIndex: -1,\n                label: item,\n                className: classes.chip,\n                onDelete: handleDelete(item)\n              }, item, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 41\n              }, this)),\n              onBlur,\n              onChange: event => {\n                handleInputChange(event);\n                onChange(event);\n              },\n              onFocus\n            },\n            ...other,\n            ...inputProps\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TagsInput, \"PMrrtZR/qEUTJ/wL/XTUIpbNods=\", false, function () {\n  return [useStyles];\n});\n\n_c = TagsInput;\nTagsInput.defaultProps = {\n  tags: []\n};\nTagsInput.propTypes = {\n  selectedTags: PropTypes.func.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string)\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TagsInput\");","map":{"version":3,"sources":["D:/web/Pet_Memories/client/my-app/src/components/Home/TagsInput.js"],"names":["React","useEffect","PropTypes","Chip","makeStyles","TextField","Downshift","useStyles","theme","chip","margin","spacing","TagsInput","props","classes","selectedTags","placeholder","tags","other","inputValue","setInputValue","useState","selectedItem","setSelectedItem","handleKeyDown","event","key","newSelectedItem","duplicatedValues","indexOf","target","value","trim","replace","length","push","slice","handleChange","item","handleDelete","splice","handleInputChange","getInputProps","onBlur","onChange","onFocus","inputProps","onKeyDown","startAdornment","map","defaultProps","propTypes","func","isRequired","arrayOf","string"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Downshift from \"downshift\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    chip: {\r\n        margin: theme.spacing(0.5, 0.25)\r\n    }\r\n}));\r\n\r\nexport default function TagsInput({ ...props }) {\r\n    const classes = useStyles();\r\n    const { selectedTags, placeholder, tags, ...other } = props;\r\n    const [inputValue, setInputValue] = React.useState(\"\");\r\n    const [selectedItem, setSelectedItem] = React.useState([]);\r\n    useEffect(() => {\r\n        setSelectedItem(tags);\r\n    }, [tags]);\r\n    useEffect(() => {\r\n        selectedTags(selectedItem);\r\n    }, [selectedItem, selectedTags]);\r\n\r\n    function handleKeyDown(event) {\r\n        if (event.key === \"Enter\") {\r\n            const newSelectedItem = [...selectedItem];\r\n            const duplicatedValues = newSelectedItem.indexOf(\r\n                event.target.value.trim()\r\n            );\r\n\r\n            if (duplicatedValues !== -1) {\r\n                setInputValue(\"\");\r\n                return;\r\n            }\r\n            if (!event.target.value.replace(/\\s/g, \"\").length) return;\r\n\r\n            newSelectedItem.push(event.target.value.trim());\r\n            setSelectedItem(newSelectedItem);\r\n            setInputValue(\"\");\r\n        }\r\n        if (\r\n            selectedItem.length &&\r\n            !inputValue.length &&\r\n            event.key === \"Backspace\"\r\n        ) {\r\n            setSelectedItem(selectedItem.slice(0, selectedItem.length - 1));\r\n        }\r\n    }\r\n    function handleChange(item) {\r\n        let newSelectedItem = [...selectedItem];\r\n        if (newSelectedItem.indexOf(item) === -1) {\r\n            newSelectedItem = [...newSelectedItem, item];\r\n        }\r\n        setInputValue(\"\");\r\n        setSelectedItem(newSelectedItem);\r\n    }\r\n\r\n    const handleDelete = item => () => {\r\n        const newSelectedItem = [...selectedItem];\r\n        newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\r\n        setSelectedItem(newSelectedItem);\r\n    };\r\n\r\n    function handleInputChange(event) {\r\n        setInputValue(event.target.value);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Downshift\r\n                id=\"downshift-multiple\"\r\n                inputValue={inputValue}\r\n                onChange={handleChange}\r\n                selectedItem={selectedItem}\r\n            >\r\n                {({ getInputProps }) => {\r\n                    const { onBlur, onChange, onFocus, ...inputProps } = getInputProps({\r\n                        onKeyDown: handleKeyDown,\r\n                        placeholder\r\n                    });\r\n                    return (\r\n                        <div>\r\n                            <TextField\r\n                                InputProps={{\r\n                                    startAdornment: selectedItem.map(item => (\r\n                                        <Chip\r\n                                            key={item}\r\n                                            tabIndex={-1}\r\n                                            label={item}\r\n                                            className={classes.chip}\r\n                                            onDelete={handleDelete(item)}\r\n                                        />\r\n                                    )),\r\n                                    onBlur,\r\n                                    onChange: event => {\r\n                                        handleInputChange(event);\r\n                                        onChange(event);\r\n                                    },\r\n                                    onFocus\r\n                                }}\r\n                                {...other}\r\n                                {...inputProps}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Downshift>\r\n        </React.Fragment>\r\n    );\r\n}\r\nTagsInput.defaultProps = {\r\n    tags: []\r\n};\r\nTagsInput.propTypes = {\r\n    selectedTags: PropTypes.func.isRequired,\r\n    tags: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n"]},"metadata":{},"sourceType":"module"}