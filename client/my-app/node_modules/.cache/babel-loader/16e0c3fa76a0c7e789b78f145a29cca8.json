{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n  window.customElements.define(tagName, clazz); // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // tslint:disable-next-line:no-any\n\n  return clazz;\n};\n\nconst standardCustomElement = (tagName, descriptor) => {\n  const {\n    kind,\n    elements\n  } = descriptor;\n  return {\n    kind,\n    elements,\n\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz) {\n      window.customElements.define(tagName, clazz);\n    }\n\n  };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\n\n\nexport const customElement = tagName => classOrDescriptor => typeof classOrDescriptor === 'function' ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty = (options, element) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (element.kind === 'method' && element.descriptor && !('value' in element.descriptor)) {\n    return Object.assign(Object.assign({}, element), {\n      finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n\n    });\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer() {\n        if (typeof element.initializer === 'function') {\n          this[element.key] = element.initializer.call(this);\n        }\n      },\n\n      finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n\n    };\n  }\n};\n\nconst legacyProperty = (options, proto, name) => {\n  proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\n\n\nexport function property(options) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor, name) => name !== undefined ? legacyProperty(options, protoOrDescriptor, name) : standardProperty(options, protoOrDescriptor);\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n * @deprecated `internalProperty` has been renamed to `state` in lit-element\n *     3.0. Please update to `state` now to be compatible with 3.0.\n */\n\nexport function internalProperty(options) {\n  return property({\n    attribute: false,\n    hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged\n  });\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n */\n\nexport const state = options => internalProperty(options);\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function query(selector, cache) {\n  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) => {\n    const descriptor = {\n      get() {\n        return this.renderRoot.querySelector(selector);\n      },\n\n      enumerable: true,\n      configurable: true\n    };\n\n    if (cache) {\n      const prop = name !== undefined ? name : protoOrDescriptor.key;\n      const key = typeof prop === 'symbol' ? Symbol() : `__${prop}`;\n\n      descriptor.get = function () {\n        if (this[key] === undefined) {\n          this[key] = this.renderRoot.querySelector(selector);\n        }\n\n        return this[key];\n      };\n    }\n\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n} // Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAsync(selector) {\n  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) => {\n    const descriptor = {\n      async get() {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAll(selector) {\n  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) => {\n    const descriptor = {\n      get() {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n\nconst legacyQuery = (descriptor, proto, name) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nconst standardQuery = (descriptor, element) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor\n});\n\nconst standardEventOptions = (options, element) => {\n  return Object.assign(Object.assign({}, element), {\n    finisher(clazz) {\n      Object.assign(clazz.prototype[element.key], options);\n    }\n\n  });\n};\n\nconst legacyEventOptions = // tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n  Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\n\nexport function eventOptions(options) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return (protoOrDescriptor, name) => name !== undefined ? legacyEventOptions(options, protoOrDescriptor, name) : standardEventOptions(options, protoOrDescriptor);\n} // x-browser support for matches\n// tslint:disable-next-line:no-any\n\nconst ElementProto = Element.prototype;\nconst legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAssignedNodes() {\n  let slotName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let flatten = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let selector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) => {\n    const descriptor = {\n      get() {\n        const slotSelector = `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n        const slot = this.renderRoot.querySelector(slotSelector);\n        let nodes = slot && slot.assignedNodes({\n          flatten\n        });\n\n        if (nodes && selector) {\n          nodes = nodes.filter(node => node.nodeType === Node.ELEMENT_NODE && ( // tslint:disable-next-line:no-any testing existence on older browsers\n          node.matches ? node.matches(selector) : legacyMatches.call(node, selector)));\n        }\n\n        return nodes;\n      },\n\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}","map":{"version":3,"mappings":"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","names":["legacyCustomElement","tagName","clazz","window","customElements","define","standardCustomElement","descriptor","kind","elements","finisher","customElement","classOrDescriptor","standardProperty","options","element","createProperty","key","Symbol","placement","initializer","call","legacyProperty","proto","name","constructor","property","protoOrDescriptor","undefined","internalProperty","attribute","hasChanged","state","query","selector","cache","get","renderRoot","querySelector","enumerable","configurable","prop","legacyQuery","standardQuery","queryAsync","updateComplete","queryAll","querySelectorAll","Object","defineProperty","standardEventOptions","assign","prototype","legacyEventOptions","eventOptions","ElementProto","Element","legacyMatches","msMatchesSelector","webkitMatchesSelector","queryAssignedNodes","slotName","flatten","slotSelector","slot","nodes","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","matches"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-element\\src\\lib\\decorators.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure Compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n * @deprecated `internalProperty` has been renamed to `state` in lit-element\n *     3.0. Please update to `state` now to be compatible with 3.0.\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n */\nexport const state = (options?: InternalPropertyDeclaration) =>\n    internalProperty(options);\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    if (cache) {\n      const prop =\n          name !== undefined ? name : (protoOrDescriptor as ClassElement).key;\n      const key = typeof prop === 'symbol' ? Symbol() : `__${prop}`;\n      descriptor.get = function(this: LitElement) {\n        if ((this as unknown as\n             {[key: string]: Element | null})[key as string] === undefined) {\n          ((this as unknown as {[key: string]: Element | null})[key as string] =\n               this.renderRoot.querySelector(selector));\n        }\n        return (\n            this as unknown as {[key: string]: Element | null})[key as string];\n      };\n    }\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n// x-browser support for matches\n// tslint:disable-next-line:no-any\nconst ElementProto = Element.prototype as any;\nconst legacyMatches =\n    ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(\n    slotName = '', flatten = false, selector = '') {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const slotSelector =\n            `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n        const slot = this.renderRoot.querySelector(slotSelector);\n        let nodes = slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n        if (nodes && selector) {\n          nodes = nodes.filter(\n              (node) => node.nodeType === Node.ELEMENT_NODE &&\n                  // tslint:disable-next-line:no-any testing existence on older browsers\n                  ((node as any).matches ?\n                       (node as Element).matches(selector) :\n                       legacyMatches.call(node as Element, selector)));\n        }\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}