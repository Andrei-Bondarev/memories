{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js'; // Get a key to lookup in `templateCaches`.\n\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(`Incompatible ShadyCSS version detected. ` + `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` + `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\n\n\nexport const shadyTemplateFactory = scopeName => result => {\n  const cacheKey = getTemplateCacheKey(result.type, scopeName);\n  let templateCache = templateCaches.get(cacheKey);\n\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap(),\n      keyString: new Map()\n    };\n    templateCaches.set(cacheKey, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n\n  if (template !== undefined) {\n    return template;\n  }\n\n  const key = result.strings.join(marker);\n  template = templateCache.keyString.get(key);\n\n  if (template === undefined) {\n    const element = result.getTemplateElement();\n\n    if (compatibleShadyCSSVersion) {\n      window.ShadyCSS.prepareTemplateDom(element, scopeName);\n    }\n\n    template = new Template(result, element);\n    templateCache.keyString.set(key, template);\n  }\n\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\n\nconst removeStylesFromLitTemplates = scopeName => {\n  TEMPLATE_TYPES.forEach(type => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n\n    if (templates !== undefined) {\n      templates.keyString.forEach(template => {\n        const {\n          element: {\n            content\n          }\n        } = template; // IE 11 doesn't support the iterable param Set constructor\n\n        const styles = new Set();\n        Array.from(content.querySelectorAll('style')).forEach(s => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\n\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n  shadyRenderSet.add(scopeName); // If `renderedDOM` is stamped from a Template, then we need to edit that\n  // Template's underlying template element. Otherwise, we create one here\n  // to give to ShadyCSS, which still requires one while scoping.\n\n  const templateElement = !!template ? template.element : document.createElement('template'); // Move styles out of rendered DOM and store.\n\n  const styles = renderedDOM.querySelectorAll('style');\n  const {\n    length\n  } = styles; // If there are no styles, skip unnecessary work\n\n  if (length === 0) {\n    // Ensure prepareTemplateStyles is called to support adding\n    // styles via `prepareAdoptedCssText` since that requires that\n    // `prepareTemplateStyles` is called.\n    //\n    // ShadyCSS will only update styles containing @apply in the template\n    // given to `prepareTemplateStyles`. If no lit Template was given,\n    // ShadyCSS will not be able to update uses of @apply in any relevant\n    // template. However, this is not a problem because we only create the\n    // template for the purpose of supporting `prepareAdoptedCssText`,\n    // which doesn't support @apply at all.\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    return;\n  }\n\n  const condensedStyle = document.createElement('style'); // Collect styles into a single style. This helps us make sure ShadyCSS\n  // manipulations will not prevent us from being able to fix up template\n  // part indices.\n  // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n  // currently does this anyway. When it does not, this should be changed.\n\n  for (let i = 0; i < length; i++) {\n    const style = styles[i];\n    style.parentNode.removeChild(style);\n    condensedStyle.textContent += style.textContent;\n  } // Remove styles from nested templates in this scope.\n\n\n  removeStylesFromLitTemplates(scopeName); // And then put the condensed style into the \"root\" template passed in as\n  // `template`.\n\n  const content = templateElement.content;\n\n  if (!!template) {\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n  } else {\n    content.insertBefore(condensedStyle, content.firstChild);\n  } // Note, it's important that ShadyCSS gets the template that `lit-html`\n  // will actually render so that it can update the style inside when\n  // needed (e.g. @apply native Shadow DOM case).\n\n\n  window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n  const style = content.querySelector('style');\n\n  if (window.ShadyCSS.nativeShadow && style !== null) {\n    // When in native Shadow DOM, ensure the style created by ShadyCSS is\n    // included in initially rendered output (`renderedDOM`).\n    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n  } else if (!!template) {\n    // When no style is left in the template, parts will be broken as a\n    // result. To fix this, we put back the style node ShadyCSS removed\n    // and then tell lit to remove that node from the template.\n    // There can be no style in the template in 2 cases (1) when Shady DOM\n    // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n    // is in use ShadyCSS removes the style if it contains no content.\n    // NOTE, ShadyCSS creates its own style so we can safely add/remove\n    // `condensedStyle` here.\n    content.insertBefore(condensedStyle, content.firstChild);\n    const removes = new Set();\n    removes.add(condensedStyle);\n    removeNodesFromTemplate(template, removes);\n  }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\n\n\nexport const render = (result, container, options) => {\n  if (!options || typeof options !== 'object' || !options.scopeName) {\n    throw new Error('The `scopeName` option is required.');\n  }\n\n  const scopeName = options.scopeName;\n  const hasRendered = parts.has(container);\n  const needsScoping = compatibleShadyCSSVersion && container.nodeType === 11\n  /* Node.DOCUMENT_FRAGMENT_NODE */\n  && !!container.host; // Handle first render to a scope specially...\n\n  const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName); // On first scope render, render into a fragment; this cannot be a single\n  // fragment that is reused since nested renders can occur synchronously.\n\n  const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n  litRender(result, renderContainer, Object.assign({\n    templateFactory: shadyTemplateFactory(scopeName)\n  }, options)); // When performing first scope render,\n  // (1) We've rendered into a fragment so that there's a chance to\n  // `prepareTemplateStyles` before sub-elements hit the DOM\n  // (which might cause them to render based on a common pattern of\n  // rendering in a custom element's `connectedCallback`);\n  // (2) Scope the template with ShadyCSS one time only for this scope.\n  // (3) Render the fragment into the container and make sure the\n  // container knows its `part` is the one we just rendered. This ensures\n  // DOM will be re-used on subsequent renders.\n\n  if (firstScopeRender) {\n    const part = parts.get(renderContainer);\n    parts.delete(renderContainer); // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n    // that should apply to `renderContainer` even if the rendered value is\n    // not a TemplateInstance. However, it will only insert scoped styles\n    // into the document if `prepareTemplateStyles` has already been called\n    // for the given scope name.\n\n    const template = part.value instanceof TemplateInstance ? part.value.template : undefined;\n    prepareTemplateStyles(scopeName, renderContainer, template);\n    removeNodes(container, container.firstChild);\n    container.appendChild(renderContainer);\n    parts.set(container, part);\n  } // After elements have hit the DOM, update styling if this is the\n  // initial render to this container.\n  // This is needed whenever dynamic changes are made so it would be\n  // safest to do every render; however, this would regress performance\n  // so we leave it up to the user to call `ShadyCSS.styleElement`\n  // for dynamic changes.\n\n\n  if (!hasRendered && needsScoping) {\n    window.ShadyCSS.styleElement(container.host);\n  }\n};","map":{"version":3,"mappings":"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","names":["removeNodes","insertNodeIntoTemplate","removeNodesFromTemplate","parts","render","litRender","templateCaches","TemplateInstance","marker","Template","html","svg","TemplateResult","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","window","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","result","cacheKey","templateCache","get","undefined","stringsArray","WeakMap","keyString","Map","set","template","strings","key","join","element","getTemplateElement","TEMPLATE_TYPES","removeStylesFromLitTemplates","forEach","templates","content","styles","Set","Array","from","querySelectorAll","s","add","shadyRenderSet","prepareTemplateStyles","renderedDOM","templateElement","document","createElement","length","condensedStyle","i","style","parentNode","removeChild","textContent","firstChild","insertBefore","querySelector","nativeShadow","cloneNode","removes","container","options","Error","hasRendered","has","needsScoping","nodeType","host","firstScopeRender","renderContainer","createDocumentFragment","Object","templateFactory","part","delete","value","appendChild","styleElement"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-html\\src\\lib\\shady-render.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n"]},"metadata":{},"sourceType":"module"}