{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\n\nexport const render = (result, container, options) => {\n  let part = parts.get(container);\n\n  if (part === undefined) {\n    removeNodes(container, container.firstChild);\n    parts.set(container, part = new NodePart(Object.assign({\n      templateFactory\n    }, options)));\n    part.appendInto(container);\n  }\n\n  part.setValue(result);\n  part.commit();\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQA,WAAR,QAA0B,UAA1B;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,SAAQC,eAAR,QAA8B,uBAA9B;AAEA,OAAO,MAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;AAEP;;;;;;;;;;;;;;;;AAeA,OAAO,MAAMC,MAAM,GACf,CAACC,MAAD,EACCC,SADD,EAECC,OAFD,KAEqC;AACnC,MAAIC,IAAI,GAAGN,KAAK,CAACO,GAAN,CAAUH,SAAV,CAAX;;AACA,MAAIE,IAAI,KAAKE,SAAb,EAAwB;AACtBX,eAAW,CAACO,SAAD,EAAYA,SAAS,CAACK,UAAtB,CAAX;AACAT,SAAK,CAACU,GAAN,CAAUN,SAAV,EAAqBE,IAAI,GAAG,IAAIR,QAAJ,CAAYa;AACjBZ;AADiB,OAEdM,OAFc,CAAZ,CAA5B;AAIAC,QAAI,CAACM,UAAL,CAAgBR,SAAhB;AACD;;AACDE,MAAI,CAACO,QAAL,CAAcV,MAAd;AACAG,MAAI,CAACQ,MAAL;AACD,CAfE","names":["removeNodes","NodePart","templateFactory","parts","WeakMap","render","result","container","options","part","get","undefined","firstChild","set","Object","appendInto","setValue","commit"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-html\\src\\lib\\render.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n"]},"metadata":{},"sourceType":"module"}