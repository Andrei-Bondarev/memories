{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n\n\nwindow.JSCompiler_renameProperty = (prop, _obj) => prop;\n\nexport const defaultConverter = {\n  toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n\n    return value;\n  },\n\n  fromAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n\n      case Number:\n        return value === null ? null : Number(value);\n\n      case Object:\n      case Array:\n        // Type assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n        return JSON.parse(value);\n    }\n\n    return value;\n  }\n\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\n\nexport const notEqual = (value, old) => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\n\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\n\nexport class UpdatingElement extends HTMLElement {\n  constructor() {\n    super();\n    this.initialize();\n  }\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n\n\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes = []; // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n\n    this._classProperties.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n\n        attributes.push(attr);\n      }\n    });\n\n    return attributes;\n  }\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n\n  /** @nocollapse */\n\n\n  static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map(); // NOTE: Workaround IE11 not supporting Map constructor argument.\n\n      const superProperties = Object.getPrototypeOf(this)._classProperties;\n\n      if (superProperties !== undefined) {\n        superProperties.forEach((v, k) => this._classProperties.set(k, v));\n      }\n    }\n  }\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n\n\n  static createProperty(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPropertyDeclaration;\n\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n\n    this._classProperties.set(name, options); // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n\n\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n\n\n  static getPropertyDescriptor(name, key, options) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get() {\n        return this[key];\n      },\n\n      set(value) {\n        const oldValue = this[name];\n        this[key] = value;\n        this.requestUpdateInternal(name, oldValue, options);\n      },\n\n      configurable: true,\n      enumerable: true\n    };\n  }\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n\n\n  static getPropertyOptions(name) {\n    return this._classProperties && this._classProperties.get(name) || defaultPropertyDeclaration;\n  }\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n\n\n  static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n\n    this[finalized] = true;\n\n    this._ensureClassProperties(); // initialize Map populated in observedAttributes\n\n\n    this._attributeToPropertyMap = new Map(); // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties; // support symbols in properties (IE11 does not support this)\n\n      const propKeys = [...Object.getOwnPropertyNames(props), ...(typeof Object.getOwnPropertySymbols === 'function' ? Object.getOwnPropertySymbols(props) : [])]; // This for/of is ok because propKeys is an array\n\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, props[p]);\n      }\n    }\n  }\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n\n\n  static _attributeNameForProperty(name, options) {\n    const attribute = options.attribute;\n    return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;\n  }\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n\n\n  static _valueHasChanged(value, old) {\n    let hasChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : notEqual;\n    return hasChanged(value, old);\n  }\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n\n\n  static _propertyValueFromAttribute(value, options) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute = typeof converter === 'function' ? converter : converter.fromAttribute;\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n\n\n  static _propertyValueToAttribute(value, options) {\n    if (options.reflect === undefined) {\n      return;\n    }\n\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;\n    return toAttribute(value, type);\n  }\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n\n\n  initialize() {\n    this._updateState = 0;\n    this._updatePromise = new Promise(res => this._enableUpdatingResolver = res);\n    this._changedProperties = new Map();\n\n    this._saveInstanceProperties(); // ensures first update will be caught by an early access of\n    // `updateComplete`\n\n\n    this.requestUpdateInternal();\n  }\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n\n\n  _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.constructor._classProperties.forEach((_v, p) => {\n      if (this.hasOwnProperty(p)) {\n        const value = this[p];\n        delete this[p];\n\n        if (!this._instanceProperties) {\n          this._instanceProperties = new Map();\n        }\n\n        this._instanceProperties.set(p, value);\n      }\n    });\n  }\n  /**\n   * Applies previously saved instance properties.\n   */\n\n\n  _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties.forEach((v, p) => this[p] = v);\n\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n\n\n  disconnectedCallback() {}\n  /**\n   * Synchronizes property values when attributes change.\n   */\n\n\n  attributeChangedCallback(name, old, value) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  _propertyToAttribute(name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPropertyDeclaration;\n    const ctor = this.constructor;\n\n    const attr = ctor._attributeNameForProperty(name, options);\n\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options); // an undefined value does not change the attribute.\n\n\n      if (attrValue === undefined) {\n        return;\n      } // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n\n\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue);\n      } // mark state not reflecting\n\n\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  _attributeToProperty(name, value) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n\n    const ctor = this.constructor; // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n\n    const propName = ctor._attributeToPropertyMap.get(name);\n\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName); // mark state reflecting\n\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName] = // tslint:disable-next-line:no-any\n      ctor._propertyValueFromAttribute(value, options); // mark state not reflecting\n\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n  /**\n   * This protected version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n\n\n  requestUpdateInternal(name, oldValue, options) {\n    let shouldRequestUpdate = true; // If we have a property key, perform property update steps.\n\n    if (name !== undefined) {\n      const ctor = this.constructor;\n      options = options || ctor.getPropertyOptions(name);\n\n      if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        } // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n\n\n        if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n\n\n  requestUpdate(name, oldValue) {\n    this.requestUpdateInternal(name, oldValue);\n    return this.updateComplete;\n  }\n  /**\n   * Sets up the element to asynchronously update.\n   */\n\n\n  async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {// Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n\n    const result = this.performUpdate(); // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n\n    if (result != null) {\n      await result;\n    }\n\n    return !this._hasRequestedUpdate;\n  }\n\n  get _hasRequestedUpdate() {\n    return this._updateState & STATE_UPDATE_REQUESTED;\n  }\n\n  get hasUpdated() {\n    return this._updateState & STATE_HAS_UPDATED;\n  }\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n\n\n  performUpdate() {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this._hasRequestedUpdate) {\n      return;\n    } // Mixin instance properties once, if they exist.\n\n\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false; // Ensure element can accept additional updates after an exception.\n\n      this._markUpdated();\n\n      throw e;\n    }\n\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n\n      this.updated(changedProperties);\n    }\n  }\n\n  _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n\n\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   * @deprecated Override `getUpdateComplete()` instead for forward\n   *     compatibility with `lit-element` 3.0 / `@lit/reactive-element`.\n   */\n\n\n  _getUpdateComplete() {\n    return this.getUpdateComplete();\n  }\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async getUpdateComplete() {\n   *       await super.getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n\n\n  getUpdateComplete() {\n    return this._updatePromise;\n  }\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n\n\n  shouldUpdate(_changedProperties) {\n    return true;\n  }\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n\n\n  update(_changedProperties) {\n    if (this._reflectingProperties !== undefined && this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n\n      this._reflectingProperties = undefined;\n    }\n\n    this._markUpdated();\n  }\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n\n\n  updated(_changedProperties) {}\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n\n\n  firstUpdated(_changedProperties) {}\n\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\n\nUpdatingElement[_a] = true;","map":{"version":3,"mappings":"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","names":["window","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Object","Array","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","finalized","UpdatingElement","HTMLElement","constructor","initialize","observedAttributes","finalize","attributes","_classProperties","forEach","v","p","attr","_attributeNameForProperty","undefined","_attributeToPropertyMap","set","push","_ensureClassProperties","hasOwnProperty","Map","superProperties","getPrototypeOf","k","createProperty","name","options","noAccessor","prototype","key","Symbol","descriptor","getPropertyDescriptor","defineProperty","get","oldValue","requestUpdateInternal","configurable","enumerable","getPropertyOptions","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","toLowerCase","_valueHasChanged","_propertyValueFromAttribute","_propertyValueToAttribute","_updateState","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","_saveInstanceProperties","_v","_instanceProperties","_applyInstanceProperties","connectedCallback","enableUpdating","disconnectedCallback","attributeChangedCallback","_attributeToProperty","_propertyToAttribute","ctor","attrValue","removeAttribute","setAttribute","propName","shouldRequestUpdate","has","_reflectingProperties","_hasRequestedUpdate","_enqueueUpdate","requestUpdate","updateComplete","e","result","performUpdate","hasUpdated","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","_getUpdateComplete","getUpdateComplete","size"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-element\\src\\lib\\updating-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        // Type assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n        return JSON.parse(value!) as unknown;\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)\n            .requestUpdateInternal(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState!: UpdateState;\n  private _instanceProperties?: PropertyValues;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise!: Promise<unknown>;\n  private _enableUpdatingResolver: ((r?: unknown) => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._updateState = 0;\n    this._updatePromise =\n        new Promise((res) => this._enableUpdatingResolver = res);\n    this._changedProperties = new Map();\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdateInternal();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This protected version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  protected requestUpdateInternal(\n      name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      options = options || ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this.requestUpdateInternal(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this._hasRequestedUpdate) {\n      return;\n    }\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   * @deprecated Override `getUpdateComplete()` instead for forward\n   *     compatibility with `lit-element` 3.0 / `@lit/reactive-element`.\n   */\n  protected _getUpdateComplete() {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async getUpdateComplete() {\n   *       await super.getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n"]},"metadata":{},"sourceType":"module"}