{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\n\nexport const reparentNodes = function (container, start) {\n  let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  while (start !== end) {\n    const n = start.nextSibling;\n    container.insertBefore(start, before);\n    start = n;\n  }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\n\nexport const removeNodes = function (container, start) {\n  let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  while (start !== end) {\n    const n = start.nextSibling;\n    container.removeChild(start);\n    start = n;\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;AAkBA;;;AAGA,OAAO,MAAMA,YAAY,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IACxBA,MAAM,CAACC,cAAP,IAAyB,IADD,IAEvBD,MAAM,CAACC,cAAP,CAA4CC,yBAA5C,KACGC,SAHD;AAKP;;;;;;AAKA,OAAO,MAAMC,aAAa,GACtB,UAACC,SAAD,EACCC,KADD,EAGmC;AAAA,MADlCC,GACkC,uEADjB,IACiB;AAAA,MAAlCC,MAAkC,uEAAd,IAAc;;AACjC,SAAOF,KAAK,KAAKC,GAAjB,EAAsB;AACpB,UAAME,CAAC,GAAGH,KAAM,CAACI,WAAjB;AACAL,aAAS,CAACM,YAAV,CAAuBL,KAAvB,EAA+BE,MAA/B;AACAF,SAAK,GAAGG,CAAR;AACD;AACF,CAVE;AAYP;;;;;AAIA,OAAO,MAAMG,WAAW,GACpB,UAACP,SAAD,EAAkBC,KAAlB,EAAmE;AAAA,MAA/BC,GAA+B,uEAAd,IAAc;;AACjE,SAAOD,KAAK,KAAKC,GAAjB,EAAsB;AACpB,UAAME,CAAC,GAAGH,KAAM,CAACI,WAAjB;AACAL,aAAS,CAACQ,WAAV,CAAsBP,KAAtB;AACAA,SAAK,GAAGG,CAAR;AACD;AACF,CAPE","names":["isCEPolyfill","window","customElements","polyfillWrapFlushCallback","undefined","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-html\\src\\lib\\dom.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n"]},"metadata":{},"sourceType":"module"}