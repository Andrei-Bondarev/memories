{"ast":null,"code":"import * as api from '../api';\nimport { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE, FETCH_SEARCH, START_LOADING, END_LOADING, FETCH_POST } from \"../constants/actionTypes\";\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.getPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.getPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const updatePost = (currentId, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(currentId, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const deletePost = currentId => async dispatch => {\n  try {\n    await api.deletePost(currentId);\n    dispatch({\n      type: DELETE,\n      payload: currentId\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const likePost = currentId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(currentId);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    debugger;\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["D:/web/Pet_Memories/client/my-app/src/actions/posts.js"],"names":["api","CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","FETCH_SEARCH","START_LOADING","END_LOADING","FETCH_POST","getPosts","page","dispatch","type","data","payload","e","console","log","message","getPost","id","createPost","post","updatePost","currentId","deletePost","likePost","getPostsBySearch","searchQuery","fetchPostsBySearch","error"],"mappings":"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","sourcesContent":["import * as api from '../api'\r\nimport {CREATE, DELETE, FETCH_ALL, LIKE, UPDATE,FETCH_SEARCH, START_LOADING, END_LOADING, FETCH_POST} from \"../constants/actionTypes\";\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n\r\n    try{\r\n\r\n        dispatch({ type: START_LOADING })\r\n        const { data } = await api.getPosts(page);\r\n        dispatch( {\r\n            type: FETCH_ALL,\r\n            payload: data\r\n        })\r\n        dispatch({ type: END_LOADING })\r\n    }catch (e){\r\n        console.log(e.message)\r\n    }\r\n}\r\nexport const getPost = (id) => async (dispatch) => {\r\n\r\n    try{\r\n\r\n        dispatch({ type: START_LOADING })\r\n        const { data } = await api.getPost(id);\r\n        dispatch( {\r\n            type: FETCH_POST,\r\n            payload: data\r\n        })\r\n        dispatch({ type: END_LOADING })\r\n    }catch (e){\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING })\r\n        const {data} = await api.createPost(post)\r\n\r\n        dispatch({type:CREATE, payload: data});\r\n        dispatch({ type: END_LOADING })\r\n    }catch (e){\r\n        console.log(e.message);\r\n    }\r\n}\r\nexport const updatePost = (currentId,post) => async (dispatch) => {\r\n    try{\r\n        const {data} = await api.updatePost(currentId,post);\r\n        dispatch({type: UPDATE,payload: data});\r\n    }catch (e){\r\n        console.log(e.message);\r\n    }\r\n}\r\nexport const deletePost = (currentId) => async (dispatch) => {\r\n    try{\r\n        await api.deletePost(currentId);\r\n\r\n        dispatch({type: DELETE,payload: currentId})\r\n    }catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\nexport const likePost = (currentId) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.likePost(currentId);\r\n        dispatch({type: LIKE,payload: data})\r\n    }catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n    try {\r\n        debugger;\r\n        dispatch({ type: START_LOADING });\r\n        const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n\r\n        dispatch({ type: FETCH_SEARCH, payload: { data } });\r\n        dispatch({ type: END_LOADING });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}