{"ast":null,"code":"import * as api from '../api';\nimport { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE, FETCH_SEARCH, START_LOADING, END_LOADING } from \"../constants/actionTypes\";\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.getPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const updatePost = (currentId, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(currentId, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e.message);\n  }\n};\nexport const deletePost = currentId => async dispatch => {\n  try {\n    await api.deletePost(currentId);\n    dispatch({\n      type: DELETE,\n      payload: currentId\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const likePost = currentId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(currentId);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getPostBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_SEARCH,\n      payload: {\n        data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"sources":["D:/web/Pet_Memories/client/my-app/src/actions/posts.js"],"names":["api","CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","FETCH_SEARCH","START_LOADING","END_LOADING","getPosts","page","dispatch","type","data","payload","e","console","log","message","createPost","post","updatePost","currentId","deletePost","likePost","getPostBySearch","searchQuery","fetchPostsBySearch"],"mappings":"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","sourcesContent":["import * as api from '../api'\r\nimport {CREATE, DELETE, FETCH_ALL, LIKE, UPDATE,FETCH_SEARCH, START_LOADING, END_LOADING} from \"../constants/actionTypes\";\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n\r\n    try{\r\n\r\n        dispatch({ type: START_LOADING})\r\n        const { data } = await api.getPosts(page);\r\n        dispatch( {\r\n            type: FETCH_ALL,\r\n            payload: data\r\n        })\r\n    }catch (e){\r\n        console.log(e.message)\r\n    }\r\n}\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.createPost(post)\r\n\r\n        dispatch({type:CREATE, payload: data});\r\n    }catch (e){\r\n        console.log(e.message);\r\n    }\r\n}\r\nexport const updatePost = (currentId,post) => async (dispatch) => {\r\n    try{\r\n        const {data} = await api.updatePost(currentId,post);\r\n        dispatch({type: UPDATE,payload: data});\r\n    }catch (e){\r\n        console.log(e.message);\r\n    }\r\n}\r\nexport const deletePost = (currentId) => async (dispatch) => {\r\n    try{\r\n        await api.deletePost(currentId);\r\n\r\n        dispatch({type: DELETE,payload: currentId})\r\n    }catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\nexport const likePost = (currentId) => async (dispatch) => {\r\n    try {\r\n        const {data} = await api.likePost(currentId);\r\n        dispatch({type: LIKE,payload: data})\r\n    }catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\r\n\r\n    try {\r\n        const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n        dispatch( {\r\n            type: FETCH_SEARCH,\r\n            payload: { data }\r\n        })\r\n    }catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}