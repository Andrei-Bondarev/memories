{"ast":null,"code":"import { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE, FETCH_SEARCH, START_LOADING, END_LOADING, FETCH_POST, COMMENT } from \"../constants/actionTypes\";\nexport default (function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    posts: [],\n    isLoading: false\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.payload._id) {\n            return;\n          }\n        })\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case FETCH_SEARCH:\n      return { ...state,\n        posts: action.payload.data\n      };\n\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/web/Pet_Memories/client/my-app/src/reducers/posts.js"],"names":["CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","FETCH_SEARCH","START_LOADING","END_LOADING","FETCH_POST","COMMENT","state","posts","isLoading","action","type","map","post","_id","payload","data","filter","currentPage","numberOfPages"],"mappings":"AAAA,SACIA,MADJ,EAEIC,MAFJ,EAGIC,SAHJ,EAIIC,IAJJ,EAKIC,MALJ,EAMIC,YANJ,EAOIC,aAPJ,EAQIC,WARJ,EASIC,UATJ,EASgBC,OAThB,QAUO,0BAVP;AAYA,gBAAe,YAAkD;AAAA,MAAjDC,KAAiD,uEAAzC;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAE;AAAvB,GAAyC;AAAA,MAAXC,MAAW;;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,OAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYI,GAAZ,CAAiBC,IAAD,IAAU;AAC7B,cAAGA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA/B,EAAmC;AAC/B;AACH;AACJ,SAJM;AAFJ,OAAP;;AAQJ,SAAKT,UAAL;AACI,aAAO,EAAE,GAAGE,KAAL;AAAYM,QAAAA,IAAI,EAAEH,MAAM,CAACK;AAAzB,OAAP;;AACJ,SAAKX,WAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAWE,QAAAA,SAAS,EAAE;AAAtB,OAAP;;AACJ,SAAKN,aAAL;AACI,aAAO,EAAC,GAAGI,KAAJ;AAAWE,QAAAA,SAAS,EAAE;AAAtB,OAAP;;AACJ,SAAKP,YAAL;AACI,aAAO,EAAE,GAAGK,KAAL;AAAYC,QAAAA,KAAK,EAAEE,MAAM,CAACK,OAAP,CAAeC;AAAlC,OAAP;;AACJ,SAAKhB,IAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAYC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYI,GAAZ,CAAiBC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAA9E;AAAnB,OAAP;;AACJ,SAAKhB,MAAL;AACI,aAAO,EAAE,GAAGU,KAAL;AAAYC,QAAAA,KAAK,EAAE,CAAC,GAAGD,KAAK,CAACC,KAAV,EAAiBE,MAAM,CAACK,OAAxB;AAAnB,OAAP;;AACJ,SAAKd,MAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYI,GAAZ,CAAiBC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAA9E;AAAnB,OAAP;;AACJ,SAAKf,MAAL;AACI,aAAO,EAAE,GAAGS,KAAL;AAAYC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYS,MAAZ,CAAoBJ,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAjD;AAAnB,OAAP;;AACJ,SAAKhB,SAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHC,QAAAA,KAAK,EAAEE,MAAM,CAACK,OAAP,CAAeC,IAFnB;AAGHE,QAAAA,WAAW,EAAER,MAAM,CAACK,OAAP,CAAeG,WAHzB;AAIHC,QAAAA,aAAa,EAAET,MAAM,CAACK,OAAP,CAAeI;AAJ3B,OAAP;;AAMJ;AACI,aAAOZ,KAAP;AAlCR;AAoCH,CArCD","sourcesContent":["import {\r\n    CREATE,\r\n    DELETE,\r\n    FETCH_ALL,\r\n    LIKE,\r\n    UPDATE,\r\n    FETCH_SEARCH,\r\n    START_LOADING,\r\n    END_LOADING,\r\n    FETCH_POST, COMMENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = {posts: [], isLoading: false},action) => {\r\n    switch (action.type){\r\n        case COMMENT:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map((post) => {\r\n                    if(post._id === action.payload._id){\r\n                        return\r\n                    }\r\n                })\r\n            }\r\n        case FETCH_POST:\r\n            return { ...state, post: action.payload }\r\n        case END_LOADING:\r\n            return {...state, isLoading: false}\r\n        case START_LOADING:\r\n            return {...state, isLoading: true}\r\n        case FETCH_SEARCH:\r\n            return { ...state, posts: action.payload.data };\r\n        case LIKE:\r\n            return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n        case CREATE:\r\n            return { ...state, posts: [...state.posts, action.payload] };\r\n        case UPDATE:\r\n            return { ...state, posts: state.posts.map((post) => (post._id === action.payload._id ? action.payload : post)) };\r\n        case DELETE:\r\n            return { ...state, posts: state.posts.filter((post) => post._id !== action.payload) };\r\n        case FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                posts: action.payload.data,\r\n                currentPage: action.payload.currentPage,\r\n                numberOfPages: action.payload.numberOfPages\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}