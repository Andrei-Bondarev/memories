{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\n\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\n\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\n\nexport class Template {\n  constructor(result, element) {\n    this.parts = [];\n    this.element = element;\n    const nodesToRemove = [];\n    const stack = []; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n\n    const walker = document.createTreeWalker(element.content, 133\n    /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */\n    , null, false); // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {\n      strings,\n      values: {\n        length\n      }\n    } = result;\n\n    while (partIndex < length) {\n      const node = walker.nextNode();\n\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop();\n        continue;\n      }\n\n      index++;\n\n      if (node.nodeType === 1\n      /* Node.ELEMENT_NODE */\n      ) {\n        if (node.hasAttributes()) {\n          const attributes = node.attributes;\n          const {\n            length\n          } = attributes; // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n\n          let count = 0;\n\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex]; // Find the attribute name\n\n            const name = lastAttributeNameRegex.exec(stringForPart)[2]; // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n\n            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue = node.getAttribute(attributeLookupName);\n            node.removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({\n              type: 'attribute',\n              index,\n              name,\n              strings: statics\n            });\n            partIndex += statics.length - 1;\n          }\n        }\n\n        if (node.tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = node.content;\n        }\n      } else if (node.nodeType === 3\n      /* Node.TEXT_NODE */\n      ) {\n        const data = node.data;\n\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1; // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n\n          for (let i = 0; i < lastIndex; i++) {\n            let insert;\n            let s = strings[i];\n\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n\n              insert = document.createTextNode(s);\n            }\n\n            parent.insertBefore(insert, node);\n            this.parts.push({\n              type: 'node',\n              index: ++index\n            });\n          } // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n\n\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            node.data = strings[lastIndex];\n          } // We have a part for each match found\n\n\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8\n      /* Node.COMMENT_NODE */\n      ) {\n        if (node.data === marker) {\n          const parent = node.parentNode; // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n\n          lastPartIndex = index;\n          this.parts.push({\n            type: 'node',\n            index\n          }); // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n\n          if (node.nextSibling === null) {\n            node.data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n\n          partIndex++;\n        } else {\n          let i = -1;\n\n          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({\n              type: 'node',\n              index: -1\n            });\n            partIndex++;\n          }\n        }\n      }\n    } // Remove text binding nodes after the walk to not disturb the TreeWalker\n\n\n    for (const n of nodesToRemove) {\n      n.parentNode.removeChild(n);\n    }\n  }\n\n}\n\nconst endsWith = (str, suffix) => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\nexport const isTemplatePartActive = part => part.index !== -1; // Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\n\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\n\nexport const lastAttributeNameRegex = // eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;","map":{"version":3,"mappings":"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","names":["marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","constructor","result","element","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","currentNode","pop","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","parts","push","type","tagName","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","nextSibling","n","removeChild","str","suffix","isTemplatePartActive","part","createComment"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-html\\src\\lib\\template.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n"]},"metadata":{},"sourceType":"module"}