{"ast":null,"code":"/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nexport class CSSResult {\n  constructor(cssText, safeToken) {\n    if (safeToken !== constructionToken) {\n      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  } // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n\n\n  get styleSheet() {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n\n    return this._styleSheet;\n  }\n\n  toString() {\n    return this.cssText;\n  }\n\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\n\nexport const unsafeCSS = value => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = value => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\n\n\nexport const css = function (strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n  return new CSSResult(cssText, constructionToken);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;AAWA;;;AAGA,OAAO,MAAMA,2BAA2B,GAAIC,MAAM,CAACC,UAAR,KACtCD,MAAM,CAACE,QAAP,KAAoBC,SAApB,IAAiCH,MAAM,CAACE,QAAP,CAAgBE,YADX,KAEtC,wBAAwBC,QAAQ,CAACC,SAFK,IAGtC,aAAaC,aAAa,CAACD,SAHzB;AAKP,MAAME,iBAAiB,GAAGC,MAAM,EAAhC;AAEA,OAAM,MAAOC,SAAP,CAAgB;AAKpBC,cAAYC,OAAZ,EAA6BC,SAA7B,EAA8C;AAC5C,QAAIA,SAAS,KAAKL,iBAAlB,EAAqC;AACnC,YAAM,IAAIM,KAAJ,CACF,mEADE,CAAN;AAED;;AAED,SAAKF,OAAL,GAAeA,OAAf;AACD,GAZmB,CAcpB;AACA;;;AACc,MAAVG,UAAU;AACZ,QAAI,KAAKC,WAAL,KAAqBb,SAAzB,EAAoC;AAClC;AACA;AACA,UAAIJ,2BAAJ,EAAiC;AAC/B,aAAKiB,WAAL,GAAmB,IAAIT,aAAJ,EAAnB;;AACA,aAAKS,WAAL,CAAiBC,WAAjB,CAA6B,KAAKL,OAAlC;AACD,OAHD,MAGO;AACL,aAAKI,WAAL,GAAmB,IAAnB;AACD;AACF;;AACD,WAAO,KAAKA,WAAZ;AACD;;AAEDE,UAAQ;AACN,WAAO,KAAKN,OAAZ;AACD;;AAhCmB;AAmCtB;;;;;;;;AAOA,OAAO,MAAMO,SAAS,GAAIC,KAAD,IAAmB;AAC1C,SAAO,IAAIV,SAAJ,CAAcW,MAAM,CAACD,KAAD,CAApB,EAA6BZ,iBAA7B,CAAP;AACD,CAFM;;AAIP,MAAMc,iBAAiB,GAAIF,KAAD,IAA4B;AACpD,MAAIA,KAAK,YAAYV,SAArB,EAAgC;AAC9B,WAAOU,KAAK,CAACR,OAAb;AACD,GAFD,MAEO,IAAI,OAAOQ,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAOA,KAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIN,KAAJ,CACF,mEACIM,KAAK;+CAFP,CAAN;AAID;AACF,CAXD;AAaA;;;;;;;;AAMA,OAAO,MAAMG,GAAG,GACZ,UAACC,OAAD,EAAmE;AAAA,oCAAhCC,MAAgC;AAAhCA,UAAgC;AAAA;;AACjE,QAAMb,OAAO,GAAGa,MAAM,CAACC,MAAP,CACZ,CAACC,GAAD,EAAMC,CAAN,EAASC,GAAT,KAAiBF,GAAG,GAAGL,iBAAiB,CAACM,CAAD,CAAvB,GAA6BJ,OAAO,CAACK,GAAG,GAAG,CAAP,CADzC,EAEZL,OAAO,CAAC,CAAD,CAFK,CAAhB;AAGA,SAAO,IAAId,SAAJ,CAAcE,OAAd,EAAuBJ,iBAAvB,CAAP;AACD,CANE","names":["supportsAdoptingStyleSheets","window","ShadowRoot","ShadyCSS","undefined","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","CSSResult","constructor","cssText","safeToken","Error","styleSheet","_styleSheet","replaceSync","toString","unsafeCSS","value","String","textFromCSSResult","css","strings","values","reduce","acc","v","idx"],"sources":["D:\\web\\Pet_Memories\\client\\my-app\\node_modules\\lit-element\\src\\lib\\css-tag.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n"]},"metadata":{},"sourceType":"module"}