{"ast":null,"code":"/*\n *   Copyright (c) 2021 Ratio Software, LLC \n *   All rights reserved.\n *   @author Clayton Gulick <clay@ratiosoftware.com>\n */\nimport { html, css, LitElement } from 'lit-element';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport ComponentChip from './component-chip';\n\nclass ChipInput extends LitElement {\n  static get properties() {\n    return {\n      chips: {\n        type: Array\n      },\n      texts: {\n        type: Array\n      },\n      autocomplete: {\n        type: Object\n      },\n      autocomplete_highlight: {\n        type: Boolean\n      },\n      autocomplete_select_default: {\n        type: Boolean\n      },\n      autocomplete_debounce: {\n        type: Number\n      },\n      autocomplete_dismiss_target: {\n        type: Object\n      },\n      show_autocomplete_on_focus: {\n        type: Boolean\n      },\n      constrain_input: {\n        type: Boolean\n      },\n      start_icon: {\n        type: String\n      },\n      end_icon: {\n        type: String\n      },\n      search_icon: {\n        type: Boolean\n      },\n      delimiters: {\n        type: Array\n      },\n      placeholder: {\n        type: String\n      },\n      value: {\n        type: String\n      }\n    };\n  }\n\n  static get styles() {\n    return css`\n            :root {\n                --chip-font-size: var(--chip-input-font-size);\n                --chip-input-autocomplete-background-color: var(--chip-input-autocomplete-background-color, white);\n                --chip-input-autocomplete-border: var(--chip-input-autocomplete-border, 1px solid lightgrey);\n                --chip-input-autocomplete-border-radius: var(--chip-input-autocomplete-border-radius, 5px);\n                --chip-input-autocomplete-font-size: var(--chip-input-autocomplete-font-size, var(--chip-input-font-size, 24px));\n                --chip-input-autocomplete-hover-background-color: var(--chip-input-autocomplete-hover-background-color, lightblue);\n            }\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: flex-start;\n                padding: 7px 3px;\n                align-items: center;\n                border-style: solid;\n                border-radius: var(--chip-input-border-radius, 0px);\n                border-color: var(--chip-input-border-color, transparent transparent #e0e0e0 transparent);\n                border-width: var(--chip-input-border-width, 0px 0px 2px 0px);\n            }\n\n            #real_input {\n                height: 100%;\n                font-size: var(--chip-input-font-size, 24px);\n                line-height: var(--chip-input-font-size, 24px);\n                border: none;\n                margin-left: 5px;\n                flex-shrink: 100;\n                flex-grow: 1;\n                flex-basis: 20%;\n                min-width: 20px;\n            }\n\n            #real_input:focus {\n                outline: none;\n            }\n\n            #caret_position_tracker {\n                visibility: hidden;\n                position: absolute;\n                top: 0px;\n                left: -5000px;\n            }\n\n            #search_icon {\n                width: 24px;\n                height: 24px;\n            }\n\n            #search_icon_stroke {\n                stroke: var(--chip-input-search-icon-stroke, lightblue);\n            }\n\n            app-chip-input-chip {\n                margin-left: 3px;\n            }\n        `;\n  }\n\n  constructor() {\n    super();\n    this.chips = [];\n    this.change_handler_enabled = true;\n    this.autocomplete_debounce = 200;\n    this.autocomplete_highlight = true;\n    this.delimiters = [' '];\n    this.constrain_input = false;\n    this.boundClickHandler = this.handleDocumentClick.bind(this);\n  }\n\n  render() {\n    return html`\n            <style>\n                \n            </style>\n            ${this.start_icon ? html`<img id=\"start_icon\" src=${this.start_icon}>` : ''}\n            ${this.search_icon ? html`\n                <svg id=\"search_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 13\">\n                    <g id=\"search_icon_stroke\" stroke-width=\"1\" fill=\"none\">\n                        <path d=\"M11.29 11.71l-4-4\"/>\n                        <circle cx=\"5\" cy=\"5\" r=\"4\"/>\n                    </g>\n                </svg>` : ''}\n            ${this.chips.map(chip => html`<app-chip-input-chip @click=${event => this.handleChipClick(event, chip)} label=\"${chip.label}\" .data=${chip.data} .chip_input=${this}></app-chip-input-chip>`)}\n            <input id=\"real_input\" type=\"text\"\n                value=${this.value || ''}\n                placeholder=${this.placeholder || ''}\n                @input=${event => this.handleInput(event)}\n                @beforeinput=${event => this.handleBeforeInput(event)}\n                @change=${event => this.handleChange(event)}\n                @keydown=${event => this.handleKeydown(event)}\n                @keyup=${event => this.updateCaretPosition(event)}\n                @click=${event => this.updateCaretPosition(event)}\n                @focus=${event => this.handleFocus(event)}\n            >\n            ${this.end_icon ? html`<img id=\"end_icon\" src=${this.end_icon}>` : ''}\n            <div id=\"caret_position_tracker\"></div>\n        `;\n  }\n\n  firstUpdated() {\n    this.caret_position_tracker = this.shadowRoot.querySelector('#caret_position_tracker');\n    this.real_input = this.shadowRoot.querySelector('#real_input');\n    this.addEventListener('chip-close', event => this.handleChipClose(event));\n    this.addEventListener('click', event => this.real_input.focus());\n  }\n\n  disconnectedCallback() {\n    let autocomplete_list = document.querySelector('#chip-input-autocomplete-container');\n\n    if (autocomplete_list) {\n      document.body.removeChild(this.autocomplete_list);\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.computed_style = getComputedStyle(this);\n    this.autocomplete_list = document.querySelector('#chip-input-autocomplete-container');\n\n    if (!this.autocomplete_list) {\n      this.autocomplete_list = document.createElement('DIV');\n      this.autocomplete_list.id = \"chip-input-autocomplete-container\";\n      this.autocomplete_list.style.display = 'none';\n      this.autocomplete_list.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n      this.autocomplete_list.style.border = 'var(--chip-input-autocomplete-border, 1px solid lightblue)';\n      this.autocomplete_list.style.borderRadius = 'var(--chip-input-autocomplete-border, 5px)';\n      this.autocomplete_list.style.fontSize = 'var(--chip-input-autocomplete-font-size, 24px)';\n      this.autocomplete_list.style.padding = 'var(--chip-input-autocomplete-padding, 5px 10px)';\n      this.autocomplete_list.style.maxHeight = 'var(--chip-input-autocomplete-max-height, 200px)';\n      this.autocomplete_list.style.overflow = 'auto';\n      this.autocomplete_list.addEventListener('focus', event => {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      });\n      document.body.appendChild(this.autocomplete_list);\n    }\n\n    this.autocomplete_list.style.position = 'absolute';\n  }\n\n  handleChipClick(event, chip) {\n    let click_event = new CustomEvent('chip-click', {\n      composed: true,\n      bubbles: true,\n      cancelable: false,\n      detail: {\n        label: chip.label,\n        data: chip.data,\n        event: event\n      }\n    }); //this.dispatchEvent(close_event);\n\n    this.dispatchEvent(click_event);\n  }\n\n  async handleFocus(event) {\n    this.updateCaretPosition(event);\n\n    if (this.show_autocomplete_on_focus && this.autocomplete) {\n      let autocomplete_items = await this.autocomplete(this.real_input.value);\n      await this.showAutoComplete(autocomplete_items, this.real_input.value);\n    }\n  }\n\n  handleDocumentClick(event) {\n    if (event.path.includes(this)) return;\n    this.closeAutoComplete(true);\n  }\n\n  async handleBeforeInput(event) {\n    let input_type = event.inputType;\n    let key = event.data;\n    let autocomplete_items = [];\n\n    if (input_type == 'deleteContentBackward') {\n      if (this.real_input.selectionStart == 0) {\n        if (this.chips.length) this.deleteChip(this.chips.length - 1);\n      }\n\n      return;\n    }\n\n    if (input_type == 'insertLineBreak') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      if (this.highlighted_autocomplete_index !== null) {\n        let div = this.autocomplete_list.childNodes[this.highlighted_autocomplete_index];\n        return this.handleAutoCompleteItemSelected(div);\n      } else {\n        if (this.autocomplete_select_default) {\n          if (this.autocomplete_list.childNodes.length) {\n            let div = this.autocomplete_list.childNodes[0];\n            return this.handleAutoCompleteItemSelected(div);\n          }\n        }\n      }\n\n      return this.createChip();\n    }\n\n    if (this.constrain_input && this.autocomplete) {\n      let value = this.real_input.value;\n      value += key;\n      this.highlighted_autocomplete_index = null;\n\n      if (this.autocomplete) {\n        autocomplete_items = await this.autocomplete(value);\n      }\n\n      if (!autocomplete_items.length) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n\n      return;\n    }\n  }\n\n  async handleInput(event) {\n    let autocomplete_items = [];\n    this.value = this.real_input.value;\n    let key = event ? event.data || '' : '';\n\n    if (this.delimiters.includes(key)) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (!this.constrain_input) return this.createChip();\n    }\n\n    if (this.autocomplete_debounce_key) clearTimeout(this.autocomplete_debounce_key);\n    this.autocomplete_debounce_key = setTimeout(async () => {\n      this.autocomplete_debounce_key = null;\n      let value = this.real_input.value;\n      this.highlighted_autocomplete_index = null;\n\n      if (this.autocomplete) {\n        autocomplete_items = await this.autocomplete(value);\n      }\n\n      if (!autocomplete_items.length) return this.closeAutoComplete();\n      return this.showAutoComplete(autocomplete_items, value);\n    }, this.autocomplete_debounce);\n    this.dispatchEvent(new CustomEvent('chip-input', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  handleKeydown(event) {\n    let key = event.key;\n    let navigating = false;\n\n    if (key == 'ArrowDown') {\n      if (this.highlighted_autocomplete_index == null) this.highlighted_autocomplete_index = -1;\n      this.highlighted_autocomplete_index++;\n      if (this.highlighted_autocomplete_index > this.autocomplete_list.childNodes.length - 1) this.highlighted_autocomplete_index = this.autocomplete_list.childNodes.length - 1;\n      navigating = true;\n    }\n\n    if (key == 'ArrowUp') {\n      if (this.highlighted_autocomplete_index == null) this.highlighted_autocomplete_index = 1;\n      this.highlighted_autocomplete_index--;\n      if (this.highlighted_autocomplete_index < 0) this.highlighted_autocomplete_index = 0;\n      navigating = true;\n    }\n\n    if (navigating) {\n      let items = this.autocomplete_list.childNodes;\n      items.forEach((item, index) => {\n        item.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n\n        if (this.highlighted_autocomplete_index == index) {\n          item.style.backgroundColor = 'var(--chip-input-autocomplete-hover-background-color, lightblue)';\n          item.scrollIntoView();\n        }\n      });\n    }\n  }\n\n  handleChange(event) {\n    if (!this.change_handler_enabled) return;\n  }\n\n  handleAutoCompleteItemSelected(div) {\n    this.change_handler_enabled = false;\n    this.real_input.value = div.dataset.value;\n    this.createChip(div.autocomplete_data);\n    this.closeAutoComplete();\n    this.real_input.blur();\n    this.real_input.focus();\n    this.highlighted_autocomplete_index = null;\n  }\n\n  handleChipClose(event) {\n    let chip_component = event.detail;\n    let chips = this.shadowRoot.querySelectorAll('app-chip-input-chip');\n    let chip_index = -1;\n\n    for (let i = 0; i < chips.length; i++) {\n      if (chips[i] == chip_component) {\n        chip_index = i;\n        break;\n      }\n    }\n\n    if (chip_index >= 0) this.deleteChip(chip_index);\n  }\n\n  async deleteChip(index) {\n    let chip = this.chips.splice(index, 1);\n    await this.requestUpdate();\n    let change_event = new CustomEvent('chip-change', {\n      composed: true,\n      bubbles: true,\n      cancelable: false\n    });\n    this.dispatchEvent(change_event);\n\n    if (this.show_autocomplete_on_focus && this.autocomplete) {\n      this.handleInput();\n    }\n  }\n\n  async createChip(data) {\n    let value = this.real_input.value;\n    this.chips.push({\n      label: value,\n      data: data\n    });\n    await this.requestUpdate();\n    this.change_handler_enabled = false;\n    this.real_input.value = '';\n    this.change_handler_enabled = true;\n    let add_event = new CustomEvent('chip-create', {\n      composed: true,\n      bubbles: true,\n      cancelable: false,\n      detail: {\n        label: value,\n        data: data\n      }\n    });\n    let change_event = new CustomEvent('chip-change', {\n      composed: true,\n      bubbles: true,\n      cancelable: false\n    });\n    this.dispatchEvent(add_event);\n    this.dispatchEvent(change_event);\n\n    if (this.show_autocomplete_on_focus && this.autocomplete) {\n      this.updateCaretPosition();\n      this.handleInput();\n    } else if (this.autocomplete) {\n      this.closeAutoComplete();\n    }\n  }\n\n  async showAutoComplete(autocomplete_items, highlight_value) {\n    let rect = this.real_input.getBoundingClientRect();\n    let value = highlight_value;\n    this.autocomplete_list.style.display = \"block\";\n    this.autocomplete_list.style.top = this.caret_position.y + rect.height + \"px\";\n    this.autocomplete_list.style.left = this.caret_position.x + \"px\";\n    this.autocomplete_list.innerHTML = '';\n    let highlighted_items = autocomplete_items.map(item => {\n      let label = '';\n      let data = {};\n\n      if (typeof item == 'string') {\n        label = item;\n      } else {\n        label = item.label;\n        data = item.data;\n      }\n\n      let start_index = label.toLowerCase().indexOf(value.toLowerCase());\n      let prefix = label.substring(0, start_index);\n      let match = label.substr(start_index, value.length);\n      let postfix = label.substr(start_index + value.length);\n      let div = document.createElement('DIV');\n      div.addEventListener('focus', event => {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      });\n      div.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n      div.style.borderBottom = '1px solid lightgrey';\n      div.style.padding = '3px';\n      div.style.cursor = 'pointer';\n      if (this.autocomplete_highlight) div.innerHTML = `${prefix}<span style='font-weight: bold'>${match}</span>${postfix}`;else div.innerHTML = label;\n      div.dataset.value = label;\n      div.autocomplete_data = data;\n\n      div.onmouseover = event => {\n        div.style.backgroundColor = 'var(--chip-input-autocomplete-hover-background-color, lightblue)';\n      };\n\n      div.onmouseout = event => {\n        div.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n      };\n\n      div.onclick = event => {\n        this.handleAutoCompleteItemSelected(div);\n      };\n\n      this.autocomplete_list.appendChild(div);\n    });\n    let autocomplete_dismiss_target = document;\n    let element;\n\n    if (this.autocomplete_dismiss_target) {\n      if (typeof this.autocomplete_dismiss_target == 'string') element = document.querySelector(this.autocomplete_dismiss_target);else element = this.autocomplete_dismiss_target;\n    }\n\n    if (element) autocomplete_dismiss_target = element;\n    autocomplete_dismiss_target.addEventListener('click', this.boundClickHandler);\n  }\n\n  closeAutoComplete(force) {\n    if (!force && this.show_autocomplete_on_focus) return;\n    if (this.autocomplete_dismiss_target) this.autocomplete_dismiss_target.removeEventListener('click', this.boundClickHandler);else document.removeEventListener('click', this.boundClickHandler);\n    this.autocomplete_list.style.display = 'none';\n  }\n\n  updateCaretPosition() {\n    let selection_start = this.real_input.selectionStart;\n    let updated_value = this.real_input.value.substring(0, selection_start).replace(/\\s/g, \"\\u00a0\");\n    this.caret_position_tracker.textContent = updated_value;\n    let pos_rect = this.caret_position_tracker.getBoundingClientRect();\n    let input_rect = this.real_input.getBoundingClientRect();\n    this.caret_position = {\n      x: input_rect.x + pos_rect.width,\n      y: input_rect.y + pos_rect.height\n    };\n  }\n\n}\n\ncustomElements.define('app-chip-input', ChipInput);\nexport default ChipInput;","map":{"version":3,"sources":["D:/web/Pet_Memories/client/my-app/node_modules/chip-input/source/component-chip-input.js"],"names":["html","css","LitElement","unsafeHTML","ComponentChip","ChipInput","properties","chips","type","Array","texts","autocomplete","Object","autocomplete_highlight","Boolean","autocomplete_select_default","autocomplete_debounce","Number","autocomplete_dismiss_target","show_autocomplete_on_focus","constrain_input","start_icon","String","end_icon","search_icon","delimiters","placeholder","value","styles","constructor","change_handler_enabled","boundClickHandler","handleDocumentClick","bind","render","map","chip","event","handleChipClick","label","data","handleInput","handleBeforeInput","handleChange","handleKeydown","updateCaretPosition","handleFocus","firstUpdated","caret_position_tracker","shadowRoot","querySelector","real_input","addEventListener","handleChipClose","focus","disconnectedCallback","autocomplete_list","document","body","removeChild","connectedCallback","computed_style","getComputedStyle","createElement","id","style","display","backgroundColor","border","borderRadius","fontSize","padding","maxHeight","overflow","preventDefault","stopImmediatePropagation","appendChild","position","click_event","CustomEvent","composed","bubbles","cancelable","detail","dispatchEvent","autocomplete_items","showAutoComplete","path","includes","closeAutoComplete","input_type","inputType","key","selectionStart","length","deleteChip","highlighted_autocomplete_index","div","childNodes","handleAutoCompleteItemSelected","createChip","autocomplete_debounce_key","clearTimeout","setTimeout","navigating","items","forEach","item","index","scrollIntoView","dataset","autocomplete_data","blur","chip_component","querySelectorAll","chip_index","i","splice","requestUpdate","change_event","push","add_event","highlight_value","rect","getBoundingClientRect","top","caret_position","y","height","left","x","innerHTML","highlighted_items","start_index","toLowerCase","indexOf","prefix","substring","match","substr","postfix","borderBottom","cursor","onmouseover","onmouseout","onclick","element","force","removeEventListener","selection_start","updated_value","replace","textContent","pos_rect","input_rect","width","customElements","define"],"mappings":"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","sourcesContent":["/*\n *   Copyright (c) 2021 Ratio Software, LLC \n *   All rights reserved.\n *   @author Clayton Gulick <clay@ratiosoftware.com>\n */\nimport {html, css, LitElement} from 'lit-element';\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html';\nimport ComponentChip from './component-chip';\n\nclass ChipInput extends LitElement {\n\n    static get properties() {\n        return  {\n            chips: {\n                type: Array\n            },\n            texts: {\n                type: Array\n            },\n            autocomplete: {\n                type: Object\n            },\n            autocomplete_highlight: {\n                type: Boolean\n            },\n            autocomplete_select_default: {\n                type: Boolean\n            },\n            autocomplete_debounce: {\n                type: Number\n            },\n            autocomplete_dismiss_target: {\n                type: Object\n            },\n            show_autocomplete_on_focus: {\n                type: Boolean\n            },\n            constrain_input: {\n                type: Boolean\n            },\n            start_icon: {\n                type: String\n            },\n            end_icon: {\n                type: String\n            },\n            search_icon: {\n                type: Boolean\n            },\n            delimiters: {\n                type: Array\n            },\n            placeholder: {\n                type: String\n            },\n            value: {\n                type: String\n            }\n        }\n    }\n\n    static get styles() {\n        return css`\n            :root {\n                --chip-font-size: var(--chip-input-font-size);\n                --chip-input-autocomplete-background-color: var(--chip-input-autocomplete-background-color, white);\n                --chip-input-autocomplete-border: var(--chip-input-autocomplete-border, 1px solid lightgrey);\n                --chip-input-autocomplete-border-radius: var(--chip-input-autocomplete-border-radius, 5px);\n                --chip-input-autocomplete-font-size: var(--chip-input-autocomplete-font-size, var(--chip-input-font-size, 24px));\n                --chip-input-autocomplete-hover-background-color: var(--chip-input-autocomplete-hover-background-color, lightblue);\n            }\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: flex-start;\n                padding: 7px 3px;\n                align-items: center;\n                border-style: solid;\n                border-radius: var(--chip-input-border-radius, 0px);\n                border-color: var(--chip-input-border-color, transparent transparent #e0e0e0 transparent);\n                border-width: var(--chip-input-border-width, 0px 0px 2px 0px);\n            }\n\n            #real_input {\n                height: 100%;\n                font-size: var(--chip-input-font-size, 24px);\n                line-height: var(--chip-input-font-size, 24px);\n                border: none;\n                margin-left: 5px;\n                flex-shrink: 100;\n                flex-grow: 1;\n                flex-basis: 20%;\n                min-width: 20px;\n            }\n\n            #real_input:focus {\n                outline: none;\n            }\n\n            #caret_position_tracker {\n                visibility: hidden;\n                position: absolute;\n                top: 0px;\n                left: -5000px;\n            }\n\n            #search_icon {\n                width: 24px;\n                height: 24px;\n            }\n\n            #search_icon_stroke {\n                stroke: var(--chip-input-search-icon-stroke, lightblue);\n            }\n\n            app-chip-input-chip {\n                margin-left: 3px;\n            }\n        `;\n    }\n\n    constructor() {\n        super();\n        this.chips = [];\n        this.change_handler_enabled = true;\n        this.autocomplete_debounce = 200;\n        this.autocomplete_highlight = true;\n        this.delimiters = [' '];\n        this.constrain_input = false;\n\n        this.boundClickHandler = this.handleDocumentClick.bind(this);\n    }\n\n    render() {\n        return html`\n            <style>\n                \n            </style>\n            ${this.start_icon ? html`<img id=\"start_icon\" src=${this.start_icon}>` : ''}\n            ${this.search_icon ? html`\n                <svg id=\"search_icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 12 13\">\n                    <g id=\"search_icon_stroke\" stroke-width=\"1\" fill=\"none\">\n                        <path d=\"M11.29 11.71l-4-4\"/>\n                        <circle cx=\"5\" cy=\"5\" r=\"4\"/>\n                    </g>\n                </svg>` : ''}\n            ${this.chips.map(\n                (chip) => html`<app-chip-input-chip @click=${(event) => this.handleChipClick(event,chip)} label=\"${chip.label}\" .data=${chip.data} .chip_input=${this}></app-chip-input-chip>`\n            )}\n            <input id=\"real_input\" type=\"text\"\n                value=${this.value || ''}\n                placeholder=${this.placeholder || ''}\n                @input=${(event) => this.handleInput(event)}\n                @beforeinput=${(event) => this.handleBeforeInput(event)}\n                @change=${(event) => this.handleChange(event)}\n                @keydown=${(event) => this.handleKeydown(event)}\n                @keyup=${(event) => this.updateCaretPosition(event)}\n                @click=${(event) => this.updateCaretPosition(event)}\n                @focus=${(event) => this.handleFocus(event)}\n            >\n            ${this.end_icon ? html`<img id=\"end_icon\" src=${this.end_icon}>` : ''}\n            <div id=\"caret_position_tracker\"></div>\n        `;\n    }\n\n    firstUpdated() {\n        this.caret_position_tracker = this.shadowRoot.querySelector('#caret_position_tracker');\n        this.real_input = this.shadowRoot.querySelector('#real_input');\n        this.addEventListener('chip-close', (event) => this.handleChipClose(event))\n        this.addEventListener('click', (event) => this.real_input.focus());\n    }\n\n    disconnectedCallback() {\n        let autocomplete_list = document.querySelector('#chip-input-autocomplete-container');\n        if(autocomplete_list) {\n            document.body.removeChild(this.autocomplete_list);\n        }\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.computed_style = getComputedStyle(this);\n        this.autocomplete_list = document.querySelector('#chip-input-autocomplete-container');\n        if(!this.autocomplete_list) {\n            this.autocomplete_list = document.createElement('DIV');\n            this.autocomplete_list.id = \"chip-input-autocomplete-container\";\n            this.autocomplete_list.style.display = 'none';\n            this.autocomplete_list.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n            this.autocomplete_list.style.border = 'var(--chip-input-autocomplete-border, 1px solid lightblue)';\n            this.autocomplete_list.style.borderRadius = 'var(--chip-input-autocomplete-border, 5px)';\n            this.autocomplete_list.style.fontSize = 'var(--chip-input-autocomplete-font-size, 24px)';\n            this.autocomplete_list.style.padding = 'var(--chip-input-autocomplete-padding, 5px 10px)';\n            this.autocomplete_list.style.maxHeight = 'var(--chip-input-autocomplete-max-height, 200px)';\n            this.autocomplete_list.style.overflow = 'auto';\n            this.autocomplete_list.addEventListener('focus', (event) => {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            });\n            document.body.appendChild(this.autocomplete_list);\n        }\n        this.autocomplete_list.style.position='absolute';\n    }\n\n    handleChipClick(event, chip) {\n        let click_event = new CustomEvent('chip-click', {\n            composed: true,\n            bubbles: true,\n            cancelable: false,\n            detail: {\n                label: chip.label,\n                data: chip.data,\n                event: event\n            }\n        });\n        //this.dispatchEvent(close_event);\n        this.dispatchEvent(click_event);\n\n    }\n\n    async handleFocus(event) {\n        this.updateCaretPosition(event);\n        if(this.show_autocomplete_on_focus && this.autocomplete) {\n            let autocomplete_items = await this.autocomplete(this.real_input.value);\n            await this.showAutoComplete(autocomplete_items, this.real_input.value);\n        }\n    }\n\n    handleDocumentClick(event) {\n        if(event.path.includes(this))\n            return;\n\n        this.closeAutoComplete(true);\n\n    }\n\n    async handleBeforeInput(event) {\n        let input_type = event.inputType;\n        let key = event.data;\n        let autocomplete_items = [];\n\n        if(input_type == 'deleteContentBackward') {\n            if(this.real_input.selectionStart == 0) {\n                if(this.chips.length)\n                    this.deleteChip(this.chips.length - 1);\n            }\n            return;\n        }\n\n        if((input_type == 'insertLineBreak')) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            \n            if(this.highlighted_autocomplete_index !== null) {\n                let div = this.autocomplete_list.childNodes[this.highlighted_autocomplete_index];\n                return this.handleAutoCompleteItemSelected(div);\n            }\n            else {\n                if(this.autocomplete_select_default) {\n                    if(this.autocomplete_list.childNodes.length) {\n                        let div = this.autocomplete_list.childNodes[0];\n                        return this.handleAutoCompleteItemSelected(div);\n                    }\n                }\n            }\n\n            return this.createChip();\n        }\n\n        if(this.constrain_input && this.autocomplete) {\n            let value = this.real_input.value;\n            value += key;\n            this.highlighted_autocomplete_index = null;\n            if (this.autocomplete) {\n                autocomplete_items = await this.autocomplete(value);\n            }\n            if (!autocomplete_items.length) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n            return;\n        }\n\n    }\n\n    async handleInput(event) {\n        let autocomplete_items = [];\n        this.value = this.real_input.value;\n        let key = event ? event.data || '' : '';\n        if(this.delimiters.includes(key)) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            if(!this.constrain_input)\n                return this.createChip();\n        }\n\n        if(this.autocomplete_debounce_key)\n            clearTimeout(this.autocomplete_debounce_key);\n\n        this.autocomplete_debounce_key = setTimeout(\n            async () => {\n                this.autocomplete_debounce_key = null;\n                let value = this.real_input.value;\n                this.highlighted_autocomplete_index = null;\n                if (this.autocomplete) {\n                    autocomplete_items = await this.autocomplete(value);\n                }\n                if (!autocomplete_items.length)\n                    return this.closeAutoComplete();\n\n                return this.showAutoComplete(autocomplete_items, value);\n            },\n            this.autocomplete_debounce\n        );\n\n        this.dispatchEvent(new CustomEvent('chip-input', {bubbles: true, composed: true}));\n\n    }\n\n    handleKeydown(event) {\n        let key = event.key;\n        let navigating =false;\n        if(key == 'ArrowDown') {\n            if(this.highlighted_autocomplete_index == null)\n                this.highlighted_autocomplete_index = -1;\n            this.highlighted_autocomplete_index++;\n            if(this.highlighted_autocomplete_index > (this.autocomplete_list.childNodes.length - 1))\n                this.highlighted_autocomplete_index = this.autocomplete_list.childNodes.length - 1;\n            navigating = true;\n        }\n\n        if(key == 'ArrowUp') {\n            if(this.highlighted_autocomplete_index == null)\n                this.highlighted_autocomplete_index = 1;\n            this.highlighted_autocomplete_index--;\n            if(this.highlighted_autocomplete_index < 0)\n                this.highlighted_autocomplete_index = 0;\n            navigating = true;\n        }\n\n        if(navigating) {\n            let items = this.autocomplete_list.childNodes;\n            items.forEach(\n                (item, index) => {\n                    item.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n                    if(this.highlighted_autocomplete_index == index) {\n                        item.style.backgroundColor = 'var(--chip-input-autocomplete-hover-background-color, lightblue)';\n                        item.scrollIntoView();\n                    }\n                }\n            )\n        }\n\n\n    }\n\n    handleChange(event) {\n        if(!this.change_handler_enabled)\n            return;\n    }\n\n    handleAutoCompleteItemSelected(div) {\n        this.change_handler_enabled = false;\n        this.real_input.value = div.dataset.value;\n        this.createChip(div.autocomplete_data);\n        this.closeAutoComplete();\n        this.real_input.blur();\n        this.real_input.focus();\n        this.highlighted_autocomplete_index = null;\n    }\n\n    handleChipClose(event) {\n        let chip_component = event.detail;\n        let chips = this.shadowRoot.querySelectorAll('app-chip-input-chip');\n        let chip_index = -1;\n        for(let i=0; i<chips.length; i++) {\n            if(chips[i] == chip_component) {\n                chip_index = i;\n                break;\n            }\n        }\n        if(chip_index >= 0)\n            this.deleteChip(chip_index);\n\n    }\n\n    async deleteChip(index) {\n        let chip = this.chips.splice(index, 1);\n        await this.requestUpdate();\n        let change_event = new CustomEvent('chip-change', {\n            composed: true,\n            bubbles: true,\n            cancelable: false,\n        });\n        this.dispatchEvent(change_event);\n        if(this.show_autocomplete_on_focus && this.autocomplete) {\n            this.handleInput();\n        }\n    }\n\n    async createChip(data) {\n        let value = this.real_input.value;\n        this.chips.push({label: value, data: data});\n        await this.requestUpdate();\n        this.change_handler_enabled = false;\n        this.real_input.value = '';\n        this.change_handler_enabled = true;\n\n        let add_event = new CustomEvent('chip-create', {\n            composed: true,\n            bubbles: true,\n            cancelable: false,\n            detail: {\n                label: value,\n                data: data,\n            }\n        });\n        let change_event = new CustomEvent('chip-change', {\n            composed: true,\n            bubbles: true,\n            cancelable: false,\n        });\n        this.dispatchEvent(add_event);\n        this.dispatchEvent(change_event);\n\n        if(this.show_autocomplete_on_focus && this.autocomplete) {\n            this.updateCaretPosition();\n            this.handleInput();\n        }\n        else if(this.autocomplete) {\n            this.closeAutoComplete();\n        }\n    }\n\n    async showAutoComplete(autocomplete_items, highlight_value) {\n        let rect = this.real_input.getBoundingClientRect();\n        let value = highlight_value;\n        this.autocomplete_list.style.display = \"block\";\n        this.autocomplete_list.style.top = (this.caret_position.y + rect.height) + \"px\";\n        this.autocomplete_list.style.left = this.caret_position.x + \"px\";\n        this.autocomplete_list.innerHTML = '';\n        let highlighted_items = autocomplete_items.map(\n            (item) => {\n                let label = '';\n                let data = {};\n                \n                if(typeof item == 'string') {\n                    label = item;\n                } else {\n                    label = item.label;\n                    data = item.data;\n                }\n                let start_index = label.toLowerCase().indexOf(value.toLowerCase());\n                let prefix = label.substring(0,start_index);\n                let match = label.substr(start_index, value.length);\n                let postfix = label.substr(start_index + value.length);\n                let div = document.createElement('DIV');\n                div.addEventListener('focus', (event) => {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                });\n\n                div.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n                div.style.borderBottom = '1px solid lightgrey';\n                div.style.padding = '3px';\n                div.style.cursor = 'pointer';\n\n                if(this.autocomplete_highlight)\n                    div.innerHTML = `${prefix}<span style='font-weight: bold'>${match}</span>${postfix}`;\n                else\n                    div.innerHTML = label;\n\n                div.dataset.value = label;\n                div.autocomplete_data = data;\n                div.onmouseover = (event) => {\n                   div.style.backgroundColor = 'var(--chip-input-autocomplete-hover-background-color, lightblue)';\n                }\n                div.onmouseout = (event) => {\n                   div.style.backgroundColor = 'var(--chip-input-autocomplete-background-color, white)';\n                }\n                div.onclick = (event) => {\n                    this.handleAutoCompleteItemSelected(div);\n                };\n                this.autocomplete_list.appendChild(div);\n            }\n        );\n        let autocomplete_dismiss_target = document;\n        let element;\n        if(this.autocomplete_dismiss_target) {\n            if(typeof this.autocomplete_dismiss_target == 'string')\n                element = document.querySelector(this.autocomplete_dismiss_target);\n            else\n                element = this.autocomplete_dismiss_target;\n\n        }\n        if(element)\n            autocomplete_dismiss_target = element;\n\n        autocomplete_dismiss_target.addEventListener('click',this.boundClickHandler);\n    }\n\n    closeAutoComplete(force) {\n        if(!force && this.show_autocomplete_on_focus)\n            return;\n        if(this.autocomplete_dismiss_target)\n            this.autocomplete_dismiss_target.removeEventListener('click',this.boundClickHandler);\n        else\n            document.removeEventListener('click',this.boundClickHandler);\n        this.autocomplete_list.style.display = 'none';\n    }\n\n    updateCaretPosition() {\n        let selection_start = this.real_input.selectionStart;\n        let updated_value = this.real_input.value.substring(0, selection_start).replace(/\\s/g, \"\\u00a0\");\n        this.caret_position_tracker.textContent = updated_value;\n        let pos_rect = this.caret_position_tracker.getBoundingClientRect();\n        let input_rect = this.real_input.getBoundingClientRect();\n        this.caret_position = {\n            x: input_rect.x + pos_rect.width,\n            y: input_rect.y + pos_rect.height\n        }\n    }\n}\n\ncustomElements.define('app-chip-input', ChipInput);\nexport default ChipInput;"]},"metadata":{},"sourceType":"module"}